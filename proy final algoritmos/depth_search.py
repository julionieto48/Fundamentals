# -*- coding: utf-8 -*-
"""Depth-search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y4eqYVc9hkq6GjKh-Q3FklBXv3lewifX
"""

!pip install networkx
!pip install algorithmx
import algorithmx
import networkx as nx
from random import randint

canvas = algorithmx.jupyter_canvas()

import algorithmx
import networkx as nx
G = nx.Graph()


G.add_nodes_from([8,3,10,1,6,14,4,7,13])
G.add_edges_from([(8,3),(8,10),
                  (3,1),(3,6) ,
                  (10,14)     ,
                  (6,4),(6,7) ,
                  (14,13)
                  ])
nx.draw(G, with_labels=True, font_weight='bold')

matAdj = [[0,1,0,0,0,0,1,0,0], 
          [0,0,1,1,0,0,0,0,0], 
          [0,0,0,0,0,0,0,0,0],
          [0,0,0,0,1,1,0,0,0],
          [0,0,0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0,1,0],
          [0,0,0,0,0,0,0,0,1],
          [0,0,0,0,0,0,0,0,0]]

visitado = [0,0,0,0,0,0,0,0,0]
nodoInicial = 0 

ans = []
stack = []

def mostrarStack():
  for i in stack:
    print(i,end='|')
  print()
  



def dfs(nodo):
  
  if visitado[nodo] != 0:         # ya visitado 
    return 
  else:
    visitado[nodo] = 1            #registrar como visitado
    
    stack.append(nodo)
    mostrarStack()

    newNodo = 0
   
    for conexion in matAdj[nodo]:    # hacer una lista de los nodos conectados
      if conexion != 0:    
        dfs(newNodo)                  # si hay vertice... llamado recursivo en nuevo nodo        
      newNodo += 1
    
    ans.append(nodo)
    stack.pop()
    mostrarStack()




dfs(nodoInicial)
print(ans)

